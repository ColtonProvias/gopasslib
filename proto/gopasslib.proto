syntax = "proto3";

package com.github.coltonprovias.gopasslib.proto;

option go_package = "github.com/ColtonProvias/gopasslib/proto";

// PasswordArgon2 serializes a hashed Argon 2 password into a protobuf format.
message PasswordArgon2 {
    // Argon2 variants. Go currently supports argon2i and argon2id, so both
    // are provided.
    enum Variant {
        VARIANT_UNDEFINED = 0;
        VARIANT_I = 1;
        VARIANT_ID = 2;
    }

    // The hashed Argon2 password.
    bytes hash = 1;

    // Variant is the Argon2 variant. Go's argon2 library provides i and id, so
    // we support both.
    Variant variant = 2;

    // Version is the version of the Argon 2 algorithm. This should usually be
    // version 0x13.
    uint32 version = 3;

    // Salt is a randomly generated salt used in the hashing rounds.
    bytes salt = 4;

    // Time is the number of passes over the memory.
    uint32 time = 5;

    // The amount of memory to use for hashing in KiB.
    uint32 memory_kib = 6;

    // The number of CPU threads to use.
    uint32 threads = 7;
}

// PasswordBcrypt provides protobuf encoding of bcrypted hashes.
message PasswordBcrypt {
    // Go only provides support for generating bcrypt 2a hashes.
    enum Version {
        VERSION_UNDEFINED = 0;
        VERSION_2A = 1;
    }

    // The version of the bcrypt algorithm used.
    Version version = 1;

    // The hashed password.
    bytes hash = 2;

    // The salt used in hashing.
    bytes salt = 3;

    // The bcrypt cost parameter.
    uint32 cost = 4;
}

// PasswordScrypt provides protobuf serialization for scrypt hashed passwords.
message PasswordScrypt {
    // Hash is the checksum generated from the scrypt algorithm.
    bytes hash = 1;

    // The salt used in the hashing operation.
    bytes salt = 2;

    // The CPU/memory cost parameter, often called N.
    uint64 cost = 3;

    // The block size used. Also called r.
    uint64 block_size = 4;

    // The parallel count parameter for scrypt. Also called p.
    uint64 parallel_count = 5;
}

// PasswordPBKDF2 provides protobuf serialization for PBKDF2-hashed passwords.
message PasswordPBKDF2 {
    // Accepted hash algorithms. PBKDF2 is quite flexible and can support many
    // more than this, but we'll stick to what Go's standard and crypto
    // libraries provide.
    enum HashAlgorithm {
        PBKDF2_HASH_UNDEFINED = 0;
        PBKDF2_HASH_SHA1 = 1;
        PBKDF2_HASH_SHA256 = 2;
        PBKDF2_HASH_SHA384 = 3;
        PBKDF2_HASH_SHA512 = 4;
        PBKDF2_HASH_SHA3 = 5;
        PBKDF2_HASH_MD5 = 6;
    }

    // The hash algorithm used in the PBKDF2 operation.
    HashAlgorithm hash_algorithm = 1;

    // The hashed password.
    bytes hash = 2;

    // The salt used in hashing.
    bytes salt = 3;

    // Number of iterations performed on each block.
    uint64 iterations = 4;
    
}

// PasswordContainer stores hashed passwords. All serialization/deserialization
// of passwords should use this rather than algorithm-specific messages. Doing
// as such helps for easier fallback to old algorithms when the default
// algorithm is changed.
message PasswordContainer {
    oneof hashed_password {
        PasswordArgon2 argon2 = 1;
        PasswordBcrypt bcrypt = 2;
        PasswordScrypt scrypt = 3;
        PasswordPBKDF2 pbkdf2 = 4;
    }
}

// Stores a TOTP secret and other metadata for generation and verification of
// TOTP tokens.
message TOTP {
    // The HTOP specification defines the use of SHA-1, while TOTP extends to
    // SHA-256 and SHA-512.
    enum HashAlgorithm {
        HASH_ALGORITHM_UNDEFINED = 0;
        HASH_ALGORITHM_SHA_1 = 1;
        HASH_ALGORITHM_SHA_256 = 2;
        HASH_ALGORITHM_SHA_512 = 3;
    }

    // The secret used in the HMAC operation.
    bytes secret = 1;

    // The hash algorithm used in the HMAC operation.
    HashAlgorithm hash_algorithm = 2;

    // The issuer of the TOTP secret.
    string issuer = 3;

    // The account tied to the TOTP secret. We store it here so this library
    // can also be used in client apps, which often accept the account.
    string account_name = 4;

    // The number of digits to generate. This should be between 6 and 9
    // inclusive.
    uint32 digits = 5;

    // The number of seconds for each period. The recommendation is 30.
    uint32 period_seconds = 6;

    // The number of periods to look back through during verification. Must be a
    // minimum of 1 to account for network delay. The recommendation is 1.
    uint32 lookback_periods = 7;
}
