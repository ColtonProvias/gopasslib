// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: proto/gopasslib.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Argon2 variants. Go currently supports argon2i and argon2id, so both
// are provided.
type PasswordArgon2_Variant int32

const (
	PasswordArgon2_VARIANT_UNDEFINED PasswordArgon2_Variant = 0
	PasswordArgon2_VARIANT_I         PasswordArgon2_Variant = 1
	PasswordArgon2_VARIANT_ID        PasswordArgon2_Variant = 2
)

// Enum value maps for PasswordArgon2_Variant.
var (
	PasswordArgon2_Variant_name = map[int32]string{
		0: "VARIANT_UNDEFINED",
		1: "VARIANT_I",
		2: "VARIANT_ID",
	}
	PasswordArgon2_Variant_value = map[string]int32{
		"VARIANT_UNDEFINED": 0,
		"VARIANT_I":         1,
		"VARIANT_ID":        2,
	}
)

func (x PasswordArgon2_Variant) Enum() *PasswordArgon2_Variant {
	p := new(PasswordArgon2_Variant)
	*p = x
	return p
}

func (x PasswordArgon2_Variant) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordArgon2_Variant) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gopasslib_proto_enumTypes[0].Descriptor()
}

func (PasswordArgon2_Variant) Type() protoreflect.EnumType {
	return &file_proto_gopasslib_proto_enumTypes[0]
}

func (x PasswordArgon2_Variant) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordArgon2_Variant.Descriptor instead.
func (PasswordArgon2_Variant) EnumDescriptor() ([]byte, []int) {
	return file_proto_gopasslib_proto_rawDescGZIP(), []int{0, 0}
}

// Go only provides support for generating bcrypt 2a hashes.
type PasswordBcrypt_Version int32

const (
	PasswordBcrypt_VERSION_UNDEFINED PasswordBcrypt_Version = 0
	PasswordBcrypt_VERSION_2A        PasswordBcrypt_Version = 1
)

// Enum value maps for PasswordBcrypt_Version.
var (
	PasswordBcrypt_Version_name = map[int32]string{
		0: "VERSION_UNDEFINED",
		1: "VERSION_2A",
	}
	PasswordBcrypt_Version_value = map[string]int32{
		"VERSION_UNDEFINED": 0,
		"VERSION_2A":        1,
	}
)

func (x PasswordBcrypt_Version) Enum() *PasswordBcrypt_Version {
	p := new(PasswordBcrypt_Version)
	*p = x
	return p
}

func (x PasswordBcrypt_Version) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PasswordBcrypt_Version) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gopasslib_proto_enumTypes[1].Descriptor()
}

func (PasswordBcrypt_Version) Type() protoreflect.EnumType {
	return &file_proto_gopasslib_proto_enumTypes[1]
}

func (x PasswordBcrypt_Version) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PasswordBcrypt_Version.Descriptor instead.
func (PasswordBcrypt_Version) EnumDescriptor() ([]byte, []int) {
	return file_proto_gopasslib_proto_rawDescGZIP(), []int{1, 0}
}

// PasswordArgon2 serializes a hashed Argon 2 password into a protobuf format.
type PasswordArgon2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hashed Argon2 password.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Variant is the Argon2 variant. Go's argon2 library provides i and id, so
	// we support both.
	Variant PasswordArgon2_Variant `protobuf:"varint,2,opt,name=variant,proto3,enum=com.github.coltonprovias.gopasslib.proto.PasswordArgon2_Variant" json:"variant,omitempty"`
	// Version is the version of the Argon 2 algorithm. This should usually be
	// version 0x13.
	Version uint32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// Salt is a randomly generated salt used in the hashing rounds.
	Salt []byte `protobuf:"bytes,4,opt,name=salt,proto3" json:"salt,omitempty"`
	// Time is the number of passes over the memory.
	Time uint32 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	// The amount of memory to use for hashing in KiB.
	MemoryKib uint32 `protobuf:"varint,6,opt,name=memory_kib,json=memoryKib,proto3" json:"memory_kib,omitempty"`
	// The number of CPU threads to use.
	Threads uint32 `protobuf:"varint,7,opt,name=threads,proto3" json:"threads,omitempty"`
}

func (x *PasswordArgon2) Reset() {
	*x = PasswordArgon2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gopasslib_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordArgon2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordArgon2) ProtoMessage() {}

func (x *PasswordArgon2) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gopasslib_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordArgon2.ProtoReflect.Descriptor instead.
func (*PasswordArgon2) Descriptor() ([]byte, []int) {
	return file_proto_gopasslib_proto_rawDescGZIP(), []int{0}
}

func (x *PasswordArgon2) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *PasswordArgon2) GetVariant() PasswordArgon2_Variant {
	if x != nil {
		return x.Variant
	}
	return PasswordArgon2_VARIANT_UNDEFINED
}

func (x *PasswordArgon2) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *PasswordArgon2) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *PasswordArgon2) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *PasswordArgon2) GetMemoryKib() uint32 {
	if x != nil {
		return x.MemoryKib
	}
	return 0
}

func (x *PasswordArgon2) GetThreads() uint32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

// PasswordBcrypt provides protobuf encoding of bcrypted hashes.
type PasswordBcrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the bcrypt algorithm used.
	Version PasswordBcrypt_Version `protobuf:"varint,1,opt,name=version,proto3,enum=com.github.coltonprovias.gopasslib.proto.PasswordBcrypt_Version" json:"version,omitempty"`
	// The hashed password.
	Hash []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	// The salt used in hashing.
	Salt []byte `protobuf:"bytes,3,opt,name=salt,proto3" json:"salt,omitempty"`
	// The bcrypt cost parameter.
	Cost uint32 `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (x *PasswordBcrypt) Reset() {
	*x = PasswordBcrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gopasslib_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordBcrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordBcrypt) ProtoMessage() {}

func (x *PasswordBcrypt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gopasslib_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordBcrypt.ProtoReflect.Descriptor instead.
func (*PasswordBcrypt) Descriptor() ([]byte, []int) {
	return file_proto_gopasslib_proto_rawDescGZIP(), []int{1}
}

func (x *PasswordBcrypt) GetVersion() PasswordBcrypt_Version {
	if x != nil {
		return x.Version
	}
	return PasswordBcrypt_VERSION_UNDEFINED
}

func (x *PasswordBcrypt) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *PasswordBcrypt) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

func (x *PasswordBcrypt) GetCost() uint32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type PasswordScrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PasswordScrypt) Reset() {
	*x = PasswordScrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gopasslib_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordScrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordScrypt) ProtoMessage() {}

func (x *PasswordScrypt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gopasslib_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordScrypt.ProtoReflect.Descriptor instead.
func (*PasswordScrypt) Descriptor() ([]byte, []int) {
	return file_proto_gopasslib_proto_rawDescGZIP(), []int{2}
}

type PasswordPBKDF2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PasswordPBKDF2) Reset() {
	*x = PasswordPBKDF2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gopasslib_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordPBKDF2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordPBKDF2) ProtoMessage() {}

func (x *PasswordPBKDF2) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gopasslib_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordPBKDF2.ProtoReflect.Descriptor instead.
func (*PasswordPBKDF2) Descriptor() ([]byte, []int) {
	return file_proto_gopasslib_proto_rawDescGZIP(), []int{3}
}

// PasswordContainer stores hashed passwords. All serialization/deserialization
// of passwords should use this rather than algorithm-specific messages. Doing
// as such helps for easier fallback to old algorithms when the default
// algorithm is changed.
type PasswordContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HashedPassword:
	//
	//	*PasswordContainer_Argon2
	//	*PasswordContainer_Bcrypt
	//	*PasswordContainer_Scrypt
	//	*PasswordContainer_Pbkdf2
	HashedPassword isPasswordContainer_HashedPassword `protobuf_oneof:"hashed_password"`
}

func (x *PasswordContainer) Reset() {
	*x = PasswordContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gopasslib_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PasswordContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordContainer) ProtoMessage() {}

func (x *PasswordContainer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gopasslib_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordContainer.ProtoReflect.Descriptor instead.
func (*PasswordContainer) Descriptor() ([]byte, []int) {
	return file_proto_gopasslib_proto_rawDescGZIP(), []int{4}
}

func (m *PasswordContainer) GetHashedPassword() isPasswordContainer_HashedPassword {
	if m != nil {
		return m.HashedPassword
	}
	return nil
}

func (x *PasswordContainer) GetArgon2() *PasswordArgon2 {
	if x, ok := x.GetHashedPassword().(*PasswordContainer_Argon2); ok {
		return x.Argon2
	}
	return nil
}

func (x *PasswordContainer) GetBcrypt() *PasswordBcrypt {
	if x, ok := x.GetHashedPassword().(*PasswordContainer_Bcrypt); ok {
		return x.Bcrypt
	}
	return nil
}

func (x *PasswordContainer) GetScrypt() *PasswordScrypt {
	if x, ok := x.GetHashedPassword().(*PasswordContainer_Scrypt); ok {
		return x.Scrypt
	}
	return nil
}

func (x *PasswordContainer) GetPbkdf2() *PasswordPBKDF2 {
	if x, ok := x.GetHashedPassword().(*PasswordContainer_Pbkdf2); ok {
		return x.Pbkdf2
	}
	return nil
}

type isPasswordContainer_HashedPassword interface {
	isPasswordContainer_HashedPassword()
}

type PasswordContainer_Argon2 struct {
	Argon2 *PasswordArgon2 `protobuf:"bytes,1,opt,name=argon2,proto3,oneof"`
}

type PasswordContainer_Bcrypt struct {
	Bcrypt *PasswordBcrypt `protobuf:"bytes,2,opt,name=bcrypt,proto3,oneof"`
}

type PasswordContainer_Scrypt struct {
	Scrypt *PasswordScrypt `protobuf:"bytes,3,opt,name=scrypt,proto3,oneof"`
}

type PasswordContainer_Pbkdf2 struct {
	Pbkdf2 *PasswordPBKDF2 `protobuf:"bytes,4,opt,name=pbkdf2,proto3,oneof"`
}

func (*PasswordContainer_Argon2) isPasswordContainer_HashedPassword() {}

func (*PasswordContainer_Bcrypt) isPasswordContainer_HashedPassword() {}

func (*PasswordContainer_Scrypt) isPasswordContainer_HashedPassword() {}

func (*PasswordContainer_Pbkdf2) isPasswordContainer_HashedPassword() {}

var File_proto_gopasslib_proto protoreflect.FileDescriptor

var file_proto_gopasslib_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x70, 0x61, 0x73, 0x73, 0x6c, 0x69,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6c, 0x74, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x61,
	0x73, 0x2e, 0x67, 0x6f, 0x70, 0x61, 0x73, 0x73, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xbc, 0x02, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x72,
	0x67, 0x6f, 0x6e, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x5a, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6c, 0x74, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x61, 0x73, 0x2e, 0x67, 0x6f, 0x70, 0x61, 0x73, 0x73, 0x6c, 0x69, 0x62, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x67,
	0x6f, 0x6e, 0x32, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x07, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61,
	0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x6b, 0x69, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x4b, 0x69, 0x62, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22,
	0x3f, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x41,
	0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x49, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x02,
	0x22, 0xda, 0x01, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x5a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6c, 0x74, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x61, 0x73, 0x2e,
	0x67, 0x6f, 0x70, 0x61, 0x73, 0x73, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x63, 0x72, 0x79, 0x70, 0x74, 0x2e, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x32, 0x41, 0x10, 0x01, 0x22, 0x10, 0x0a,
	0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x63, 0x72, 0x79, 0x70, 0x74, 0x22,
	0x10, 0x0a, 0x0e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x4b, 0x44, 0x46,
	0x32, 0x22, 0xf6, 0x02, 0x0a, 0x11, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x61, 0x72, 0x67, 0x6f, 0x6e,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6c, 0x74, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x61, 0x73, 0x2e, 0x67, 0x6f, 0x70, 0x61, 0x73, 0x73, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x41, 0x72, 0x67, 0x6f, 0x6e,
	0x32, 0x48, 0x00, 0x52, 0x06, 0x61, 0x72, 0x67, 0x6f, 0x6e, 0x32, 0x12, 0x52, 0x0a, 0x06, 0x62,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6c, 0x74, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x61, 0x73, 0x2e, 0x67, 0x6f, 0x70, 0x61, 0x73, 0x73, 0x6c, 0x69, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x48, 0x00, 0x52, 0x06, 0x62, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x52, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6c,
	0x74, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x61, 0x73, 0x2e, 0x67, 0x6f, 0x70, 0x61, 0x73,
	0x73, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x53, 0x63, 0x72, 0x79, 0x70, 0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x52, 0x0a, 0x06, 0x70, 0x62, 0x6b, 0x64, 0x66, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6c, 0x74, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x61, 0x73, 0x2e, 0x67,
	0x6f, 0x70, 0x61, 0x73, 0x73, 0x6c, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x4b, 0x44, 0x46, 0x32, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x62, 0x6b, 0x64, 0x66, 0x32, 0x42, 0x11, 0x0a, 0x0f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x6f, 0x6c, 0x74, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x61, 0x73, 0x2f, 0x67, 0x6f, 0x70, 0x61, 0x73, 0x73, 0x6c, 0x69, 0x62,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_gopasslib_proto_rawDescOnce sync.Once
	file_proto_gopasslib_proto_rawDescData = file_proto_gopasslib_proto_rawDesc
)

func file_proto_gopasslib_proto_rawDescGZIP() []byte {
	file_proto_gopasslib_proto_rawDescOnce.Do(func() {
		file_proto_gopasslib_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_gopasslib_proto_rawDescData)
	})
	return file_proto_gopasslib_proto_rawDescData
}

var file_proto_gopasslib_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_gopasslib_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_gopasslib_proto_goTypes = []interface{}{
	(PasswordArgon2_Variant)(0), // 0: com.github.coltonprovias.gopasslib.proto.PasswordArgon2.Variant
	(PasswordBcrypt_Version)(0), // 1: com.github.coltonprovias.gopasslib.proto.PasswordBcrypt.Version
	(*PasswordArgon2)(nil),      // 2: com.github.coltonprovias.gopasslib.proto.PasswordArgon2
	(*PasswordBcrypt)(nil),      // 3: com.github.coltonprovias.gopasslib.proto.PasswordBcrypt
	(*PasswordScrypt)(nil),      // 4: com.github.coltonprovias.gopasslib.proto.PasswordScrypt
	(*PasswordPBKDF2)(nil),      // 5: com.github.coltonprovias.gopasslib.proto.PasswordPBKDF2
	(*PasswordContainer)(nil),   // 6: com.github.coltonprovias.gopasslib.proto.PasswordContainer
}
var file_proto_gopasslib_proto_depIdxs = []int32{
	0, // 0: com.github.coltonprovias.gopasslib.proto.PasswordArgon2.variant:type_name -> com.github.coltonprovias.gopasslib.proto.PasswordArgon2.Variant
	1, // 1: com.github.coltonprovias.gopasslib.proto.PasswordBcrypt.version:type_name -> com.github.coltonprovias.gopasslib.proto.PasswordBcrypt.Version
	2, // 2: com.github.coltonprovias.gopasslib.proto.PasswordContainer.argon2:type_name -> com.github.coltonprovias.gopasslib.proto.PasswordArgon2
	3, // 3: com.github.coltonprovias.gopasslib.proto.PasswordContainer.bcrypt:type_name -> com.github.coltonprovias.gopasslib.proto.PasswordBcrypt
	4, // 4: com.github.coltonprovias.gopasslib.proto.PasswordContainer.scrypt:type_name -> com.github.coltonprovias.gopasslib.proto.PasswordScrypt
	5, // 5: com.github.coltonprovias.gopasslib.proto.PasswordContainer.pbkdf2:type_name -> com.github.coltonprovias.gopasslib.proto.PasswordPBKDF2
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_gopasslib_proto_init() }
func file_proto_gopasslib_proto_init() {
	if File_proto_gopasslib_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_gopasslib_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordArgon2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gopasslib_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordBcrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gopasslib_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordScrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gopasslib_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordPBKDF2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gopasslib_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PasswordContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_gopasslib_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*PasswordContainer_Argon2)(nil),
		(*PasswordContainer_Bcrypt)(nil),
		(*PasswordContainer_Scrypt)(nil),
		(*PasswordContainer_Pbkdf2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_gopasslib_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_gopasslib_proto_goTypes,
		DependencyIndexes: file_proto_gopasslib_proto_depIdxs,
		EnumInfos:         file_proto_gopasslib_proto_enumTypes,
		MessageInfos:      file_proto_gopasslib_proto_msgTypes,
	}.Build()
	File_proto_gopasslib_proto = out.File
	file_proto_gopasslib_proto_rawDesc = nil
	file_proto_gopasslib_proto_goTypes = nil
	file_proto_gopasslib_proto_depIdxs = nil
}
